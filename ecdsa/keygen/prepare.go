// Copyright Â© 2019 Binance
//
// This file is part of Binance. The full Binance copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

package keygen

import (
	"context"
	"crypto/rand"
	"errors"
	"io"
	"math/big"
	"runtime"
	"time"

	"github.com/bnb-chain/tss-lib/v2/common"
	"github.com/bnb-chain/tss-lib/v2/crypto/paillier"
)

var hardcodedFixtures = []LocalPartySaveData{
    {
        PaillierSK: &paillier.PrivateKey{
            N:      new(big.Int).SetString(26862170591381186117144639121800907711621441110694985906073099493104224258631997616337459884349048315436649598594766212786190249139720542986841637789367089751895746802368064104115662988051298443105665522549043623368088781757399812306242052676963161647378421463432813771675598887217547787422261194939872523185392600641669797286300834348740665304662829760721139573070204170902129262797162145018079946053388917283347495995703735479819366865064178966988962612678607190805087224162314010583832802161588455461100682306289046720947974174001828045869589748392310605782826097558345479795972515955139600004112610785604729710757, 10),
            LambdaN: new(big.Int).SetString(13431085295690593058572319560900453855810720555347492953036549746552112129315998808168729942174524157718324799297383106393095124569860271493420818894683544875947873401184032052057831494025649221552832761274521811684044390878699906153121026338481580823689210731716406885837799443608773893711130597469936261592532213858878816794879138507493230952759071143256763914863135847264553077488577664633510002801989144150002815082601970607292530318876745886925922476991203656094267047307176836180759972736598187277189369375666238571075693265319527847455818556610107935217778613614515276483294115793052848151350340343144475494998, 10),
            PhiN:   new(big.Int).SetString(26862170591381186117144639121800907711621441110694985906073099493104224258631997616337459884349048315436649598594766212786190249139720542986841637789367089751895746802368064104115662988051298443105665522549043623368088781757399812306242052676963161647378421463432813771675598887217547787422261194939872523185064427717757633589758277014986461905518142286513527829726271694529106154977155329267020005603978288300005630165203941214585060637753491773851844953982407312188534094614353672361519945473196374554378738751332477142151386530639055694911637113220215870435557227229030552966588231586105696302700680686288950989996, 10),
            P:      new(big.Int).SetString(156199992157527515679277851563515941446129352347011319825196067672572313106672920497393870514107469203466250029881858883814872913259387909227911821518374527804663005734804760515923302853633171490096548012329974306537954808287455990519023653082720419807513617030697689651815046731746603871834526414575616974279, 10),
            Q:      new(big.Int).SetString(171972931754636180863279482190687457698558121860600423518736408700450794713333895253666069935303159779875615800617935381419433314051299283909205837177825350811890123813155577706389553834758909416625395542626595272258632835075316360438928982089374315539755253298617237177569237637287299829577403684740161746483, 10),
        },
        NTildei: new(big.Int).SetString(25107490776052945575790163886980744121852075793230702092031092910315419013111724585107741342302647097816029689069156500419649067226989207335403141846585589456214707140363806918024254341805807847344462552372749802373561411623464018306841140152736878126807643286464707464144491205717529334857128642937311664356950670200785184493082292988908234459722618881044613550904554507333793627844968327344517418351075665978629614435510466378211576459017353838583039397930178040557511540818370302033808216608330168909665648805527673068950251148153088673193641290377199021831923470431364077200419352774733381328839199321622201645277, 10),
        H1i:     new(big.Int).SetString(947268510305326446073634507724913447936734171636912400557401318775427643035322780043344044871778218536295489345747992085537349997385753459769909944243608187249295932620582767525243046024431872134558350124222211815956076009495579000118546531817489783543950708796804986346442485595844139040615169351977594594085460608932273701244091036215057114383266995365365226626217411088112095883376367775475107954293975266374705057036496941779873360807750450088301028537780564210964889218799820623451941121168857520561736570209171665676631521362739174866629364755585577716299287494251706261472512421959632149833106509542229972234, 10),
        H2i:     new(big.Int).SetString(369382535766024782757053511943484023707590301248858510505619543451105355366349475321600848828578055383112252081262740450957242693258711711573898608872557215737850380375149487180022863563616178163440683814662347260503803753150609907077552201623376131096249150783552367189222999632342102603491398593162398739317344334427947844029843540621897547082716967267285286086227255034044222917612280937408214149645699005643727644027239999997789724357422423935120674874708262799420509411969660535187315093553065000790565517535769427338692918882249946664488170641583406635227373502217028982923125561321182147198392699754510926843, 10),
        Alpha:   new(big.Int).SetString(6669702575802332067051507400723122644839122909837745212967242092483177093666409546803836461769838120342268901353955156661858215357972959560589013601496347059806025103870404243017483236835513779152636288855166974055130846382972514018626781368599584594970808367427466242387093516189696228727421743052639556770083365914732684526264745234552992519722018618668212942788843125095288624719491808726320606573330293693883472896837701226592981135230240346758366425506314368382164046393267850565316732719649541361696315531259629023604214612386322746665953174348707199467021358068970739744717116080568232157794570566194767962193, 10),
        Beta:    new(big.Int).SetString(4226702103283230409689887623397868172263773072284894957823563643849293193454026723702667572204652313053676186724572803175380434781233229139441124649381910161179586223174332599144926974124401757990737042528978346870480691970515558734832577382199462271326295128038175934801169919909683367743160668157108777692509546415310274417808611190360269418302199996410620600891919468677526911530111335678118505332265820985238717612050499504379017017998849335196637255127847818529939710513362492159636375161860102767812483118583893111980078668274650612227857015281800001652750733997357414494554663009577159114465037019654992649831, 10),
        P:       new(big.Int).SetString(73458738483859906960505530286009984246470949380903088699714197960661061085155739592774719387578463149575507386969755941321227590452894174208881731929135833875986292699119509529479934647644869851989583450086833987908020203092806374228228193163809755370417640606181205095011955590840300054963158041301552101041, 10),
        Q:       new(big.Int).SetString(85447597162213295592421685633760432054265215569039633105172607001373470153249654026667908067025680307951469974169784414915998293227135302230856861321307857553984952411841792538464994439156606764727476914663543473228913738927277839435079606623601328422838494376915981928356488990978178935974751052976368228959, 10),
    },
    {
        PaillierSK: &paillier.PrivateKey{
            N:      new(big.Int).SetString(28569426937909813160816852590974326182398707183206563780157489308279811863376093908221211903705518704565348072663191903836343635499091979154072341420741676813730020871016039693403607409462919125031372066954550208350129974140220983698064393340951930706962427015297577648437601064168848334164842111410896962654571826800302294766234904003147622246551178854009373086133349568572584906962173774282191211244583738166117722131851467394725949126097483624199330170392292115956857647929895014719727669500452359666570376448590229755339126098108084513655351630004806845329610086536348250655270492083872210115099541350980087869489, 10),
            LambdaN: new(big.Int).SetString(14284713468954906580408426295487163091199353591603281890078744654139905931688046954110605951852759352282674036331595951918171817749545989577036170710370838406865010435508019846701803704731459562515686033477275104175064987070110491849032196670475965353481213507648788824218800532084424167082421055705448481327116571621783280156627266306673613557770132415067791761025356248059645897264585788635046339329639753214021614915782754214179908727166288405568041736300150892127323291788850009844614304509270438683742045888904656839139941936906942558425724970581335889893630058987401037228149733076112847409338010564314966102162, 10),
            PhiN:   new(big.Int).SetString(28569426937909813160816852590974326182398707183206563780157489308279811863376093908221211903705518704565348072663191903836343635499091979154072341420741676813730020871016039693403607409462919125031372066954550208350129974140220983698064393340951930706962427015297577648437601064168848334164842111410896962654233143243566560313254532613347227115540264830135583522050712496119291794529171577270092678659279506428043229831565508428359817454332576811136083472600301784254646583577700019689228609018540877367484091777809313678279883873813885116851449941162671779787260117974802074456299466152225694818676021128629932204324, 10),
            P:      new(big.Int).SetString(179696051055123023215556819548680549334277719811328399025475104641756939359631189702474530421876600335876842000086226772970952145746397968678244929383831619212881928505998388309390501861374874325811635591096208662594788934951680613702506047691842619635942634194229436037649059736143528223527514655893104450263, 10),
            Q:      new(big.Int).SetString(158987505680611429764814570251714581676636304062461165057161967811536173073371007309624002163427631402197650300199732193395179526018508844385001768408158712489329135846196606721108558620536607973274649079684707414464453289342518783101395641150292445906407334367316740161321966195502987072896005566457051214903, 10),
        },
		NTildei:new(big.Int).SetString(25347321253130040165669198464747637594561084543160875890419030859255281770152898118930416834987900972848102624649324216864737441361174703716495863609322476087408028387965233238285802668149470294745292681572931725456001393301305606431470624857854001369500295623909754190673037775702216922020351830224578270444039819022050738946522292544390839130641700344286132805509002888252787493089063466842186838763536749516490621525613122365080892293964923531037888659136998882617232588657938236946761539565880695421135081565601958037809654399412376843665230604400657963765839300124472222517361299084266084873325229770349534163801, 10),
		H1i:new(big.Int).SetString(3880611998802971481733631912608098494196262778323132826239497201888814778206565779038508295122457059564658474446013387570155222804192995563846151508944721213706421845709980882611956739258515443677158361364276786837940404625680574358803765552923094221476122072037719326145018613827892918963555625064867923347247217043400958580189757825375746004023039968242295816205605839011845166061436412284630990719600784460170159747697580968014664501419463157750169639809058771175198577548493272625218114926414363501638734650889306046401503137104184980837461670247903219705017626260602184962369771097797399062562513353217770565531, 10),
		H2i:new(big.Int).SetString(15969079226966183502382475788401338523488393107499291032002044296474627394217596503568693748659928310923714663501210832583018731196547300812154979725769686288361401778491755680431944887852103221593745623856378860738388368922715577130878948380171217565406616753411777571011139446871620361320986832525400727639941640937364793530207582464684574638726091525574744197708378588020682070096454926012197394347212926657909811288708691651092564968341401161265195710381753419063864921935963903871011102644256286369641306466313805437318014970058871604639507243703932226939038829663830985880788590281053591951619664726739953671018, 10),
		Alpha:new(big.Int).SetString(21491373657758085577916665593069897304698302824435532374383303720077841245117963656613269831569915553635905663061595834031898972929677249621933525501357436617324598304991585720687960909120658023342943471479838820960047997726786932001492921886802008375343827315954282235777792289696889802892898512843614362177443840425280198612137376280284849353811498082367792976318845774884618722716252884964293120442367038395033342390295633797972152438214316402685935216333012823407451764996594240864085421336823764988704967767076102572703398147213022890269868975034087372976874667029882482262817244173861823337136055042053399964749, 10),
		Beta:new(big.Int).SetString(3320311752963954234697711283997815118439358938488190680929864725275034450096946665982937070819528081639621271613538490046386233130458063404579138646139919818379405279730584606243356048610802153043772324355846574025657091426070974316058004074522798849624673902006611228323918313017476418442921878743271314304960386902920541720359376856180397105402483065699785280311003389761147901974764578633793149569955286297534816723552552275416622730320317061458505375678230006930629535752265013560395587064530027550698558348295866795214521021305541919346582881078518616476349467229447131285652277977502561612452907061432958990114, 10),
		P: new(big.Int).SetString(70809288826622369725825379006387741309025014873650261751266229233883897190933864780171874016638684817324204969639453339585607590221341667270589678303972956528804192252650177939435179917755571202115955733042695654662128941468586251562467087477332554065966906744871985875266426991185100611501333353651522226181, 10),
		Q:   new(big.Int).SetString(89491511894694159453747430128734210348570662135726367595285167836164539619537914844620100362327593655844333914098578866199805574792984175111800205197419163387659137071854218603937967776465225847192887789659618586209585295171442059952399265568911468803824806178632700690337945305729670474997622116792123325013, 10),
    },
    {
        PaillierSK: &paillier.PrivateKey{
            N:      new(big.Int).SetString(24206147216197161168800749713794253097360175090858672931928135053300720098263302199858364218289609440982336278990382306871237304598903324389321581163067390799950591531027240968685694116269131503639449889176152844762069948482523881916749982047987022468266212702666839762407435492828573898843940379718086699114362935636941751781265771147161683942488081675636897258681038605775448214108367751993197065197897191643383564344845162403884453232776839031251175853763144050201714908798915379664014184087913029794762586324582687266708240565299184055542301695610690632283322864399949456272972805575542427101734659832898527078677, 10),
            LambdaN: new(big.Int).SetString(12103073608098580584400374856897126548680087545429336465964067526650360049131651099929182109144804720491168139495191153435618652299451662194660790581533695399975295765513620484342847058134565751819724944588076422381034974241261940958374991023993511234133106351333419881203717746414286949421970189859043349557024310086219410477072748318487742739042777792072287595135146879759069811629897245323954026052320936771957200007617646395169281432170783039473463063929011840852856768971615621594157956524540453364109564204089902134439307707012750590999769391124192112406139571469549041961432228411468903953868707176804446220918, 10),
            PhiN:   new(big.Int).SetString(24206147216197161168800749713794253097360175090858672931928135053300720098263302199858364218289609440982336278990382306871237304598903324389321581163067390799950591531027240968685694116269131503639449889176152844762069948482523881916749982047987022468266212702666839762407435492828573898843940379718086699114048620172438820954145496636975485478085555584144575190270293759518139623259794490647908052104641873543914400015235292790338562864341566078946926127858023681705713537943231243188315913049080906728219128408179804268878615414025501181999538782248384224812279142939098083922864456822937807907737414353608892441836, 10),
            P:      new(big.Int).SetString(179347946090591232979004413467496114724106046225268285989836604667382648146344194469177416555876441903499128428642839375190430980577227664241391921790897322284182306801422645287586317496796904441090376224911593079648968209876923078326921963018765802933604070645734447691803536882758254809782260398835871487663, 10),
            Q:      new(big.Int).SetString(134967518412339594141270096718702349678420045267053782420908241589925942702229066876111596537378876195970035900967030238355459387858045288062857804114223046211819064054261491188111953542035218625453081691491289918180656941396759795215840950343540604537439650815116924658304811869846364384214985080453763149179, 10),
        },
		NTildei:new(big.Int).SetString(21292308023632581181198289513256444712308177801737936647775817904740223548406904422170044682275257431431315028868812996459652895591102638516259762883465973519952131280804384814232387700680465986308431924126707276653911414520068641511680988816011871501850341616042836704357314055609697319128691732749390230733118584785117859207288385865822542643892497962395263780902218346962474333143560514409678469862250207440675303576178809488957082804485944446225032956319749038833642485681946267959990181650810435723731755627693490958402541015772649403218387116342415453965710612578891122860080475980560084488514089712934013739781, 10),
		H1i:new(big.Int).SetString(10831225843690707396172531846155417775408096606230693395561759792282094678514600816663347869748948927505461627250570771469119140533266318664691242702922064589002187370016461932692821183944924214028723777910582605988927471997349297521445102656640882914313554019001846714781268540993241638422699989309757114468372538565383360692272346876551928106077801669528247179220120217249637229522616724754257258083101113512544707361337883525289735840725085893321825199206160881032044949147621462286088226618153585859120352649591156109044603116965314576319186213041333237791389005373191075396808136402252420638572954706343475908070, 10),
		H2i:new(big.Int).SetString(4991965837400033768069871541004261063135140339060316531025599789490182217840042887067892359235887756385798984623237629620830856274859128458536333773291056510054624668039972342087961925191332459597054733496082441434562377800869508105363637144128472861641912914050632826421706717769073047295100882343425757237060029497292934794235607113222710491355298594636899811931946648047811854321545995037508110462735244536402582555614331492107887985617810756386029525697146027973237905139754077084275404126435090136074550061845235250362605148173730041087342012184590101575852114035899339078096801167678750962125251280492197772961, 10),
		Alpha:new(big.Int).SetString(12467492105857811088598302265413624870073963876683904115549792420718244667761381421662233615179766169159301747248171001794324121204205514721429411527556422474730559769416341734269127480499195450639280845254825411204958752546880935506192531533720763834591807162931020700005834118949784903275082231197821697666438147146351494072123177022074937176886845914902073137041551203992966070392159928400957103356072574222408552466272801416682546062655619490834257111523501863902732635107221589080095740033399178826436203367881462984740273038927833790029236756977691739321073706751435418243818216736984796273413201551593241377745, 10),
		Beta:new(big.Int).SetString(3092900433075562857730870820153450098596803035900780910921649947445993103830332321974327778125342409105586526032316509076255129195987441893584663089182631340709377726700826265326534446647512383669109999128575227820698317763796087420267115770338098171394186245601090936193819697220860084235631876618972161796183290283437286083205410206306343632327839214997496752240852724669373936278550652726231441900252091569385961205860343319878986257063348059860099745005755756686589281908205169093609472515987160341040392705054879831617033293887998222621876114828567467692369732362792302927316059137471591649253327901378732843111, 10),
		P: new(big.Int).SetString(74729784971772398429529650577831893381748271883890759436992442977820668409070982447343050413507330989104807520612734716141235130908592245155908358608877871002264282164414418683122667727977065469038707348970011499327641988120347830292987877895400315533431826053732774970762953513006237872470250023861544322019, 10),
		Q:   new(big.Int).SetString(71230995886296547844286770147735054870849465379812954762983713904489759233350383164729814676282726841672841443277930887612560071405593846902336747858766127875795287445507639632096218873801296532878661675646715168843741383193429019420970355899846985062779107421621481264788608899327914283807067035047912995689, 10),
    },
}

const (
	// Using a modulus length of 2048 is recommended in the GG18 spec
	paillierModulusLen = 2048
	// Two 1024-bit safe primes to produce NTilde
	safePrimeBitLen = 1024
	// Ticker for printing log statements while generating primes/modulus
	logProgressTickInterval = 8 * time.Second
	// Safe big len using random for ssid test s
	SafeBitLen = 1024
)

// GeneratePreParams finds two safe primes and computes the Paillier secret required for the protocol.
// This can be a time consuming process so it is recommended to do it out-of-band.
// If not specified, a concurrency value equal to the number of available CPU cores will be used.
// If pre-parameters could not be generated before the timeout, an error is returned.
func GeneratePreParams(timeout time.Duration, optionalConcurrency ...int) (*LocalPreParams, error) {
	common.Logger.Info("è¿æ¥GeneratePreParams===>")
	ctx, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()
	return GeneratePreParamsWithContext(ctx, optionalConcurrency...)
}

// GeneratePreParams finds two safe primes and computes the Paillier secret required for the protocol.
// This can be a time consuming process so it is recommended to do it out-of-band.
// If not specified, a concurrency value equal to the number of available CPU cores will be used.
// If pre-parameters could not be generated before the context is done, an error is returned.
func GeneratePreParamsWithContext(ctx context.Context, optionalConcurrency ...int) (*LocalPreParams, error) {
	common.Logger.Info("è¿æ¥GeneratePreParamsWithContext===>")
	return GeneratePreParamsWithContextAndRandom(ctx, rand.Reader, optionalConcurrency...)
}

// GeneratePreParams finds two safe primes and computes the Paillier secret required for the protocol.
// This can be a time consuming process so it is recommended to do it out-of-band.
// If not specified, a concurrency value equal to the number of available CPU cores will be used.
// If pre-parameters could not be generated before the context is done, an error is returned.
func GeneratePreParamsWithContextAndRandom(ctx context.Context, rand io.Reader, optionalConcurrency ...int) (*LocalPreParams, error) {
	common.Logger.Info("è¿æ¥åGeneratePreParamsWithContextAndRandom===>")
	devMode := true
	if devMode {
		if partyIndex < 0 || partyIndex >= len(hardcodedFixtures) {
            return nil, errors.New("invalid party index")
        }
        return &hardcodedFixtures[partyIndex].LocalPreParams, nil
		// fixtures, _, err := LoadKeygenTestFixtures(3)
		// if err != nil {
		// 	common.Logger.Info("å è½½fixtureåºé: ", err)
		// 	return nil, err
		// }
		// if len(fixtures) == 0 {
		// 	common.Logger.Info("æªå è½½å°ä»»ä½fixture")
		// 	return nil, errors.New("no fixtures loaded")
		// }
		// common.Logger.Info("LoadKeygenTestFixtures001===>", fixtures)
		// return &fixtures[0].LocalPreParams, nil
	} else{
	common.Logger.Info("è¿æ¥2===>")
		var concurrency int
		if 0 < len(optionalConcurrency) {
			if 1 < len(optionalConcurrency) {
				panic(errors.New("GeneratePreParams: expected 0 or 1 item in `optionalConcurrency`"))
			}
			concurrency = optionalConcurrency[0]
		} else {
			concurrency = runtime.NumCPU()
		}
		if concurrency /= 3; concurrency < 1 {
			concurrency = 1
		}
	
		// prepare for concurrent Paillier and safe prime generation
		paiCh := make(chan *paillier.PrivateKey, 1)
		sgpCh := make(chan []*common.GermainSafePrime, 1)
	
		// 4. generate Paillier public key E_i, private key and proof
		go func(ch chan<- *paillier.PrivateKey) {
			common.Logger.Info("generating the Paillier modulus, please wait...")
			start := time.Now()
			// more concurrency weight is assigned here because the paillier primes have a requirement of having "large" P-Q
			PiPaillierSk, _, err := paillier.GenerateKeyPair(ctx, rand, paillierModulusLen, concurrency*2)
			if err != nil {
				ch <- nil
				return
			}
			common.Logger.Infof("paillier modulus generated. took %s\n", time.Since(start))
			ch <- PiPaillierSk
		}(paiCh)
	
		// 5-7. generate safe primes for ZKPs used later on
		go func(ch chan<- []*common.GermainSafePrime) {
			var err error
			common.Logger.Info("generating the safe primes for the signing proofs, please wait...")
			start := time.Now()
			sgps, err := common.GetRandomSafePrimesConcurrent(ctx, safePrimeBitLen, 2, concurrency, rand)
			if err != nil {
				ch <- nil
				return
			}
			common.Logger.Infof("safe primes generated. took %s\n", time.Since(start))
			ch <- sgps
		}(sgpCh)
	
		// this ticker will print a log statement while the generating is still in progress
		logProgressTicker := time.NewTicker(logProgressTickInterval)
	
		// errors can be thrown in the following code; consume chans to end goroutines here
		var sgps []*common.GermainSafePrime
		var paiSK *paillier.PrivateKey
	consumer:
		for {
			select {
			case <-logProgressTicker.C:
				common.Logger.Info("still generating primes...")
			case sgps = <-sgpCh:
				if sgps == nil ||
					sgps[0] == nil || sgps[1] == nil ||
					!sgps[0].Prime().ProbablyPrime(30) || !sgps[1].Prime().ProbablyPrime(30) ||
					!sgps[0].SafePrime().ProbablyPrime(30) || !sgps[1].SafePrime().ProbablyPrime(30) {
					return nil, errors.New("timeout or error while generating the safe primes")
				}
				if paiSK != nil {
					break consumer
				}
			case paiSK = <-paiCh:
				if paiSK == nil {
					return nil, errors.New("timeout or error while generating the Paillier secret key")
				}
				if sgps != nil {
					break consumer
				}
			}
		}
		logProgressTicker.Stop()
	
		P, Q := sgps[0].SafePrime(), sgps[1].SafePrime()
		NTildei := new(big.Int).Mul(P, Q)
		modNTildeI := common.ModInt(NTildei)
	
		p, q := sgps[0].Prime(), sgps[1].Prime()
		modPQ := common.ModInt(new(big.Int).Mul(p, q))
		f1 := common.GetRandomPositiveRelativelyPrimeInt(rand, NTildei)
		alpha := common.GetRandomPositiveRelativelyPrimeInt(rand, NTildei)
		beta := modPQ.ModInverse(alpha)
		h1i := modNTildeI.Mul(f1, f1)
		h2i := modNTildeI.Exp(h1i, alpha)
	
		preParams := &LocalPreParams{
			PaillierSK: paiSK,
			NTildei:    NTildei,
			H1i:        h1i,
			H2i:        h2i,
			Alpha:      alpha,
			Beta:       beta,
			P:          p,
			Q:          q,
		}
		return preParams, nil
	}
}
